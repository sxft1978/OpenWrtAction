#
# Copyright (c) 2022-2024 SMALLPROGRAM <https://github.com/smallprogram/OpenWrtAction>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# Description: Build OpenWrt using GitHub Actions
#

name: ImmortalWrt-openwrt_x86

on:
  repository_dispatch:
  workflow_dispatch:

env:
  FEEDS_CONF: feeds_config/immortalwrt.feeds.conf.default
  DIY_P1_SH: diy_script/immortalwrt_diy/diy-part1.sh 
  DIY_P2_SH: diy_script/immortalwrt_diy/diy-part1.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_ARTIFACT: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
 job_build:
    runs-on: ubuntu-22.04
    name: build
    steps:
      - name: Initialization Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown -R $USER:$GROUPS /workdir
          df -hT

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
           root-reserve-mb: 6144
           swap-size-mb: 10240
           remove-dotnet: true
           remove-android: true
           remove-haskell: true
           remove-codeql: true
           remove-docker-images: true
           build-mount-path: /workdir
           temp-reserve-mb: 100
           overprovision-lvm: false
           build-mount-path-ownership: runner:runner
           pv-loop-path: /pv.img
           tmp-pv-loop-path: /mnt/tmp-pv.img
      
       echo "Memory and swap:"
  sudo free
  echo
  sudo swapon --show
  echo
  
  echo "Available storage:"
  sudo df -h
  echo
set -euo pipefail
  
  BUILD_MOUNT_PATH="/workdir"
  if [[ -z "${BUILD_MOUNT_PATH}" ]]; then
    BUILD_MOUNT_PATH="${GITHUB_WORKSPACE}"
  fi
  
  echo "Arguments:"
  echo
  echo "  Root reserve:      6144 MiB"
  echo "  Temp reserve:      100 MiB"
  echo "  Swap space:        10240 MiB"
  echo "  Overprovision LVM: false"
  echo "  Mount path:        ${BUILD_MOUNT_PATH}"
  echo "  Root PV loop path: /pv.img"
  echo "  Temp PV loop path: /mnt/tmp-pv.img"
  echo -n "  Removing:     "
  if [[ true == 'true' ]]; then
    echo -n "dotnet "
  fi
  if [[ true == 'true' ]]; then
    echo -n "android "
  fi
  if [[ true == 'true' ]]; then
    echo -n "haskell "
  fi
  if [[ true == 'true' ]]; then
    echo -n "codeql "
  fi
  if [[ true == 'true' ]]; then
    echo -n "docker "
  fi
  echo
  
  # store owner of $GITHUB_WORKSPACE in case the action deletes it
  WORKSPACE_OWNER="$(stat -c '%U:%G' "${GITHUB_WORKSPACE}")"
  
  # ensure mount path exists before the action
  sudo mkdir -p "${BUILD_MOUNT_PATH}"
  sudo find "${BUILD_MOUNT_PATH}" -maxdepth 0 ! -empty -exec echo 'WARNING: directory [{}] is not empty, data loss might occur. Content:' \; -exec ls -al "{}" \;
  
  echo "Removing unwanted software... "
  if [[ true == 'true' ]]; then
    sudo rm -rf /usr/share/dotnet
  fi
  if [[ true == 'true' ]]; then
    sudo rm -rf /usr/local/lib/android
  fi
  if [[ true == 'true' ]]; then
    sudo rm -rf /opt/ghc
  fi
  if [[ true == 'true' ]]; then
    sudo rm -rf /opt/hostedtoolcache/CodeQL
  fi
  if [[ true == 'true' ]]; then
    sudo docker image prune --all --force
  fi
  echo "... done"
  
  VG_NAME=buildvg
  
  # github runners have an active swap file in /mnt/swapfile
  # we want to reuse the temp disk, so first unmount swap and clean the temp disk
  echo "Unmounting and removing swap file."
  sudo swapoff -a
  sudo rm -f /mnt/swapfile
  
  echo "Creating LVM Volume."
  echo "  Creating LVM PV on root fs."
  # create loop pv image on root fs
  ROOT_RESERVE_KB=$(expr 6144 \* 1024)
  ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
  ROOT_LVM_SIZE_KB=$(expr $ROOT_FREE_KB - $ROOT_RESERVE_KB)
  ROOT_LVM_SIZE_BYTES=$(expr $ROOT_LVM_SIZE_KB \* 1024)
  sudo touch "/pv.img" && sudo fallocate -z -l "${ROOT_LVM_SIZE_BYTES}" "/pv.img"
  export ROOT_LOOP_DEV=$(sudo losetup --find --show "/pv.img")
  sudo pvcreate -f "${ROOT_LOOP_DEV}"
  
  # create pv on temp disk
  echo "  Creating LVM PV on temp fs."
  TMP_RESERVE_KB=$(expr 100 \* 1024)
  TMP_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
  TMP_LVM_SIZE_KB=$(expr $TMP_FREE_KB - $TMP_RESERVE_KB)
  TMP_LVM_SIZE_BYTES=$(expr $TMP_LVM_SIZE_KB \* 1024)
  sudo touch "/mnt/tmp-pv.img" && sudo fallocate -z -l "${TMP_LVM_SIZE_BYTES}" "/mnt/tmp-pv.img"
  export TMP_LOOP_DEV=$(sudo losetup --find --show "/mnt/tmp-pv.img")
  sudo pvcreate -f "${TMP_LOOP_DEV}"
  
  # create volume group from these pvs
  sudo vgcreate "${VG_NAME}" "${TMP_LOOP_DEV}" "${ROOT_LOOP_DEV}"
  
  echo "Recreating swap"
  # create and activate swap
  sudo lvcreate -L "10240M" -n swap "${VG_NAME}"
  sudo mkswap "/dev/mapper/${VG_NAME}-swap"
  sudo swapon "/dev/mapper/${VG_NAME}-swap"
  
  echo "Creating build volume"
  # create and mount build volume
  sudo lvcreate -l 100%FREE -n buildlv "${VG_NAME}"
  if [[ false == 'true' ]]; then
    sudo mkfs.ext4 -m0 "/dev/mapper/${VG_NAME}-buildlv"
  else
    sudo mkfs.ext4 -Enodiscard -m0 "/dev/mapper/${VG_NAME}-buildlv"
  fi
  sudo mount "/dev/mapper/${VG_NAME}-buildlv" "${BUILD_MOUNT_PATH}"
  sudo chown -R "runner:runner" "${BUILD_MOUNT_PATH}"
  
  # if build mount path is a parent of $GITHUB_WORKSPACE, and has been deleted, recreate it
  if [[ ! -d "${GITHUB_WORKSPACE}" ]]; then
    sudo mkdir -p "${GITHUB_WORKSPACE}"
    sudo chown -R "${WORKSPACE_OWNER}" "${GITHUB_WORKSPACE}"
  fi
  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Clone Source Code
        working-directory: /workdir
        run: |
          git clone https://github.com/immortalwrt/immortalwrt.git openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    
      - name: Install Packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update    
          sudo -E apt-get -qq install $(curl -fsSL https://github.com/smallprogram/OpenWrtAction/raw/main/diy_script/immortalwrt_dependence)
          sudo timedatectl set-timezone "$TZ"
          df -hT     

      - name: Load Custom Feeds
        run: |
             [ -e $FEEDS_CONF ] && cp -r feeds_config/immortalwrt.feeds.conf.default openwrt/feeds.conf.default
             chmod +x diy_script/immortalwrt_diy/diy-part1.sh
             cd openwrt
             $GITHUB_WORKSPACE/diy_script/immortalwrt_diy/diy-part1.sh
          

      - name: Update Feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install Feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load Configuration
        run: |
          [ -e config/immortalwrt_config/X86.config ] && cp -r config/immortalwrt_config/X86.config openwrt/.config
          cd openwrt
          make defconfig
          # $GITHUB_WORKSPACE/$COPY_BACKGROUNDFILES_SH "" "X86" 

      - name: Download Package
        id: package
        run: |
          df -hT
          cd $GITHUB_WORKSPACE/openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -hT

          

      - name: Generate Frimware
        id: compile
        run: |
           cd openwrt
           echo -e "$(nproc) thread compile"
           make -j$(nproc) || make -j1 || make -j1 V=s
           echo "status=success" >> $GITHUB_OUTPUT
           grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          cho "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
